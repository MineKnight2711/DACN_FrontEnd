import 'package:flutter/material.dart';
import 'package:fooddelivery_fe/api/orders/order_api.dart';
import 'package:fooddelivery_fe/controller/account_controller.dart';
import 'package:fooddelivery_fe/model/order_model.dart';
import 'package:fooddelivery_fe/model/review_order_dto.dart';
import 'package:get/get.dart';

class RatingOrderController extends GetxController {
  late OrderApi _orderApi;
  late AccountController _accountController;
  RxList<OrderDetailsDTO> listCompleteOrder = <OrderDetailsDTO>[].obs;
  RxList<OrderDetailsDTO> listRatedOrder = <OrderDetailsDTO>[].obs;
  TextEditingController feedBackController = TextEditingController();
  RxDouble score = 0.0.obs;

  @override
  void onInit() {
    super.onInit();
    _orderApi = OrderApi();
    _accountController = Get.find<AccountController>();
  }

  @override
  void refresh() {
    super.refresh();
    score.value = 0.0;
    scoreChangingResult(score.value);
    feedBackController.clear();
    getAllCompleteOrder();
  }

  void scoreChanging(double updateScore) {
    score.value = updateScore;
    print(score.value);
    scoreChangingResult(score.value);
  }

  // void getOrderByStatus(String status) {
  //   switch (status) {
  //     case "ƒê√£ ho√†n t·∫•t":
  //       listCompleteOrder.value = listOrder
  //           .where(
  //               (orderDetails) => orderDetails.order?.status == "ƒê√£ ho√†n t·∫•t")
  //           .toList();
  //       break;
  //     case "ƒê√£ ƒë√°nh gi√°":
  //       listRatedOrder.value = listOrder
  //           .where(
  //               (orderDetails) => orderDetails.order?.status == "ƒê√£ ƒë√°nh gi√°")
  //           .toList();
  //       break;

  //     default:
  //   }
  // }

  RxString scoreChangingResult(double updatedScore) {
    RxString result = "".obs;
    if (updatedScore >= 1 && updatedScore < 2) {
      result.value =
          "Xin l·ªói v·ªÅ tr·∫£i nghi·ªám kh√¥ng t·ªët c·ªßa b·∫°n\nH√£y cho ch√∫ng t√¥i bi·∫øt n√™n c·∫£i thi·ªán ƒëi·ªÅu g√¨ ·ªü ph·∫ßn ph·∫£n h·ªìiüò≠";
    } else if (updatedScore >= 2 && updatedScore < 3) {
      result.value =
          'B·∫°n c√≥ ƒëi·ªÅu ch∆∞a h√†i l√≤ng ·ªü ch√∫ng t√¥i?\nXin h√£y ph·∫£n h·ªìi b√™n d∆∞·ªõiüòì';
    } else if (updatedScore >= 3 && updatedScore < 4) {
      result.value =
          'C√°m ∆°n ph·∫£n h·ªìi c·ªßa b·∫°n , h√£y cho ch√∫ng t√¥i bi·∫øt th√™m ƒëi·ªÅu g√¨ khi·∫øn b·∫°n ch∆∞a h√†i l√≤ng v·ªÅ ƒë∆°n h√†ng b√™n d∆∞·ªõi nh√©üòÑ';
    } else if (updatedScore >= 4 && updatedScore < 5) {
      result.value =
          'Ch√∫ng t√¥i r·∫•t vui v√¨ tr·∫£i nghi·ªám c·ªßa b·∫°n l√† r·∫•t t·ªët\nH√£y cho ch√∫ng t√¥i bi·∫øt √Ω ki·∫øn ƒë√≥ng g√≥p c·ªßa b·∫°n \nƒê·ªÉ ch√∫ng t√¥i c√≥ th·ªÉ ho√†n thi·ªán h∆°n n·ªØa nh√©üòçüòç';
    } else if (updatedScore == 5) {
      result.value =
          'Fanstatic!, Wonderful!, Significant!\nMagnificent!, Out standing!, World Class!üòéüòéüòé';
    } else {
      result.value = "";
    }
    return result;
  }

  Future<void> getAllCompleteOrder() async {
    if (_accountController.accountSession.value != null) {
      final response = await _orderApi.getAccountOrdersByStatus(
          "${_accountController.accountSession.value?.accountID}",
          "ƒê√£ thanh to√°n");
      if (response.message == "Success") {
        final orderDetailsJson = response.data as List<dynamic>;

        listCompleteOrder.value = orderDetailsJson
            .map((orderDetails) => OrderDetailsDTO.fromJson(orderDetails))
            .toList();
      }
    }
  }

  Future<void> getAllRatedOrder() async {
    if (_accountController.accountSession.value != null) {
      final response = await _orderApi.getAccountOrdersByStatus(
          "${_accountController.accountSession.value?.accountID}",
          "ƒê√£ ƒë√°nh gi√°");
      if (response.message == "Success") {
        final orderDetailsJson = response.data as List<dynamic>;

        listRatedOrder.value = orderDetailsJson
            .map((orderDetails) => OrderDetailsDTO.fromJson(orderDetails))
            .toList();
      }
    }
  }

  Future<String> rateOrder(String orderId) async {
    ReviewOrderDTO dto = ReviewOrderDTO(
      orderId: orderId,
      score: score.value,
      feedback: feedBackController.text,
    );
    final response = await _orderApi.rateOrder(dto);
    return response.message ?? '';
  }
}
